knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(fig.align="left")
library(tidyverse)
library(spsurvey)
library(sf)
library(ff)
source('functions.R')
praw <- '../data/raw'
f <- list.files(praw)
soil_stab <- read.csv( file.path(praw, f[grep('Benchmark', f)]) )
ss_full <- soil_stab %>%
group_by(ESD) %>%
filter(n() ==3) %>%
ungroup()
ss_two <- soil_stab %>%  # SITES with two metrics, in all instances
group_by(ESD) %>% # simply missing the average.
filter(n() == 2)
ss_one <- soil_stab %>% # sites with only a single metric
group_by(ESD) %>%
filter(n() == 1)
ss_median <- soil_stab %>%
ungroup() %>%
pivot_longer( cols = LOW:HIGH, names_to = 'ESTIMATE', values_to = 'STABILITY') %>%
group_by(SETTING, ESTIMATE) %>%
mutate(MEDIAN = median(STABILITY)) %>%
add_count(name = 'SAMPLE')
prcnt <- paste0(round( length(unique(ss_full$ESD))/length(unique(soil_stab$ESD)) * 100, 1), '%')
missing <- ss_median %>%
group_by(ESD) %>%
filter(n() < 6)
tomake <- missing %>%
distinct(ESD) %>%
pull(ESD)
medians <- ss_median %>%
distinct(SETTING, ESTIMATE, MEDIAN)
missing <- tibble(
ESD = rep(tomake, each = 6),
SETTING = rep(c('INTERSPACES', 'CANOPY', 'SITE'), each = 2, times = length(tomake)),
ESTIMATE = rep(c('LOW', 'HIGH'), each = 1, times = length(tomake)*3)
) %>%
left_join(., medians) %>%
left_join(., missing, by = c('ESD', 'SETTING', 'ESTIMATE', 'MEDIAN')) %>%
rowwise() %>%
mutate(STABILITY = replace_na(STABILITY, MEDIAN))
ss_median <- ss_median %>%
group_by(ESD) %>%
filter(n() == 6) %>%
bind_rows(., missing) %>%
select(-SAMPLE)
# write.csv(ss_median, '../data/processed/imputed_medians.csv', row.names = F)
rm(missing, tomake, medians)
rm(prcnt, ss_two, ss_one, ss_full, soil_stab)
ss <- read.csv(file.path(praw, f[grep('AIM', f)])) %>%
select(OBJECTID, PrimaryKey, starts_with(c('Rating',  'Veg'))) %>%
filter(if_all(Rating1:Veg18, ~ !is.na(.x))) %>%
mutate(across(where(is.character), ~ na_if(., ""))) %>%
pivot_longer(cols = Rating1:Rating18, names_to = 'Position',
values_to = 'Aggregate_Stability') %>%
pivot_longer(cols = Veg1:Veg18, names_to = 'Position_Veg',
values_to = 'Vegetation_Type') %>%
mutate(Position = str_remove(Position, 'Rating'),
Position_Veg = str_remove(Position_Veg, 'Veg')) %>%
filter(Position == Position_Veg) %>%
select(-starts_with('Position')) %>%
mutate(Type = if_else(Vegetation_Type %in% c('F', 'G', 'Sh', 'T'),
'Canopy', 'Interspace')) %>%
group_by(OBJECTID) %>%
mutate(SiteStability = median(Aggregate_Stability)) %>%
group_by(OBJECTID, Type) %>%
mutate(Type_stability = median(Aggregate_Stability)) %>%
add_count(name = 'Sample_n')
ss_sum <- ss %>%
distinct(OBJECTID, Type, .keep_all = T) %>%
select(-Aggregate_Stability, -Vegetation_Type)
rm(ss)
# read in header which serves as link between SS and and summary data
header <- read.csv(file.path(praw, f[grep('Header', f)])) %>%
select(PlotKey, PrimaryKey)
ss_sum <- inner_join(header, ss_sum, by ='PrimaryKey', multiple = "all") # all good.
# read in summary data
td_summary <- read.csv(file.path(praw, f[grep('Summary', f)])) %>%
select(PrimaryKey, PlotKey, PlotID, Latitude_NAD83, Longitude_NAD83)
ss_sum <- inner_join(td_summary, ss_sum, by = c('PrimaryKey', 'PlotKey'),
multiple = "all") # all good
# read in ESD classifications
esd_class <- read.csv( file.path(praw, f[grep('Tracking', f)]) ) %>%
filter(STATUS == 'SAMPLED') %>%
mutate(ECO.SITE = if_else(ECO.SITE.MATCHED == F, 'UNKNOWN', ECO.SITE)) %>%
select(PlotID = PLOT.ID, ECO.SITE)
# join plots to our ESD's spatially ! spatial_join() with a small buffer.
pts <- st_read(
'../../aimDB/data/raw/AIM_Sample_Design/AIM_Design_Stratification.shp',
quiet = T) %>%
st_transform(26913) %>%
st_buffer(55) %>%
select(PLOTID, STRATUM)
ss_sum <- ss_sum %>%
st_as_sf(crs = 4269,
coords = c(x = 'Longitude_NAD83', y = 'Latitude_NAD83')) %>%
st_transform(26913) %>%
select(-PlotID)
ss_sum <- st_intersection(pts, ss_sum) %>%
left_join(., esd_class, by = c('PLOTID' = 'PlotID')) %>%
mutate(ECO.SITE = if_else(PLOTID == 'GR-035', 'R036XY114CO', ECO.SITE),
PLOTID = if_else(PLOTID == 'GR-035', 'GR-025', PLOTID))
rm(header, td_summary,  pts, esd_class)
wghts <- read.csv( file.path(praw, f[grep('Weights', f)])) %>%
select(WghtPerPlot, STRATUM = Stratum, AoInference = Area)
ss_sum <- read.csv( file.path(praw, f[grep('Interence', f)])) %>%
select(PLOTID = Plot.ID, AoInference) %>%
right_join(., ss_sum, multiple = "all") %>%
mutate(STRATUM = str_remove(str_extract(PLOTID, '^.*-'), '-')) %>%
left_join(., wghts, by = c('STRATUM','AoInference')) %>%
mutate(AoInference = str_replace(AoInference, '-NM', '-NCA')) %>%
st_as_sf()
rm(wghts)
# Calculate the value for the OVERALL PLOT
dat2run <- ss_sum %>%
distinct(PLOTID, .keep_all = T)
ss_median_all <- ss_median %>%
filter(SETTING == 'SITE', ESTIMATE == 'LOW') %>%
distinct() %>%
select(ESD, STABILITY) %>%
bind_rows(., data.frame(ESD = 'UNKNOWN', STABILITY = 4))
overall_stability_df <- left_join(dat2run, ss_median_all,
by = c('ECO.SITE' = 'ESD')) %>%
mutate(STABILITY = if_else(is.na(STABILITY), 4, STABILITY),
Type = 'Site',
Meeting = if_else(SiteStability >= STABILITY, T, F)) %>%
drop_na()
overall_stab <- cat_analysis(
dframe = overall_stability_df, siteID = 'PLOTID', vars = 'Meeting',
subpops = 'AoInference',  weight = 'WghtPerPlot', vartype = 'Local', conf = 80)
# Under canopy stability
dat2run <- ss_sum %>%
filter(Type == 'Canopy')
ss_median_canopy <- ss_median %>%
filter(SETTING == 'CANOPY', ESTIMATE == 'LOW') %>%
distinct() %>%
select(ESD, STABILITY) %>%
bind_rows(., data.frame(ESD = 'UNKNOWN', STABILITY = 4)) # ALSO A 4 FOR THE LOW MEDIAN
canopy_stability_df <- left_join(dat2run, ss_median_canopy,
by = c('ECO.SITE' = 'ESD')) %>%
mutate(STABILITY = if_else(is.na(STABILITY), 4, STABILITY),
Meeting = if_else(SiteStability >= STABILITY, T, F)) %>%
drop_na()
canopy_stab <- cat_analysis(
dframe = canopy_stability_df, siteID = 'PLOTID', vars = 'Meeting',
subpops = 'AoInference',  weight = 'WghtPerPlot', vartype = 'Local', conf = 80)
# Interspaces stability
dat2run <- ss_sum %>%
filter(Type == 'Interspace')
ss_median_interspace <- ss_median %>%
filter(SETTING == 'INTERSPACE', ESTIMATE == 'LOW') %>%
distinct() %>%
select(ESD, STABILITY) %>%
bind_rows(., data.frame(ESD = 'UNKNOWN', STABILITY = 3))
interspace_stability_df <- left_join(dat2run, ss_median_interspace,
by = c('ECO.SITE' = 'ESD')) %>%
mutate(STABILITY = if_else(is.na(STABILITY), 4, STABILITY),
Meeting = if_else(SiteStability >= STABILITY, T, F)) %>%
drop_na()
interspace_stab <- cat_analysis(
dframe = interspace_stability_df, siteID = 'PLOTID', vars = 'Meeting',
subpops = 'AoInference',  weight = 'WghtPerPlot', vartype = 'Local', conf = 80)
# create a writing summary dataframe to pull values from
wr_sum <- bind_rows(canopy_stability_df, interspace_stability_df, overall_stability_df) %>%
select(PLOTID, AoInference, Type, Meeting, ECO.SITE) %>%
st_drop_geometry()
rm(WilsonCanHaveFun, dat2run, ss_median_interspace, ss_median_canopy, ss_median_all,
canopy_stability_df, interspace_stability_df, overall_stability_df)
waff_dat_cover <- overall_stab %>%
filter(Category == T) %>%
mutate(
across(where(is.numeric), ~ round(.x, 0)),
Low = if_else(LCB80Pct.P == 0, 0, LCB80Pct.P - 1),
CI_Low = Estimate.P - LCB80Pct.P,
Estimate = 1,
CI_High = UCB80Pct.P - Estimate.P,
High = if_else(UCB80Pct.P == 0, 100, 100 - UCB80Pct.P)
) %>%
rowwise(Subpopulation) %>%
mutate(High = if_else(sum(c_across(Low:High)) > 100, High -1, High),
High = if_else(sum(c_across(Low:High)) < 100, High + 1, High))  %>%
select(Subpopulation, Low:High) %>%
pivot_longer(cols = Low:High, names_to = 'Statistic', values_to = 'Value') %>%
group_by(Subpopulation) %>%
mutate(
Statistic = factor(Statistic,
levels = c('Low', 'CI_Low', 'Estimate', 'CI_High', 'High')),
Subpopulation = factor(Subpopulation,
levels = c('ACEC-WSA', 'DE-NCA', 'GG-NCA', 'Remaining BLM')))
waff_dat <- data.table::setorder(waff_dat_cover, Statistic)
waf_values = c('Low' = '#1FE032', 'High' = '#E0321F', 'CI_Low' = '#808929',
'Estimate' = 'black', 'CI_High' = '#808929')
w <- ggplot(waff_dat_cover, aes(fill = Statistic, values = Value)) +
geom_waffle(color = "white", size = .25, flip = TRUE) +
facet_wrap( ~ Subpopulation) +
scale_fill_manual('Condition', values = waf_values,
labels = c('Meeting', 'Conf. Int.', "Estimate", 'Conf. Int.', 'Failing')) +
scale_x_discrete()  +
scale_y_continuous('Percent Land', labels = function(x)round(x * 10, -1), expand = c(0,0))  +
theme(
legend.position="bottom", legend.direction="vertical",
aspect.ratio = 1,
axis.text.y = element_text(color = "grey20", size = 6, angle = 45),
axis.title.y = element_text(size = 9),
legend.key.size = unit(0.8, 'lines'),
legend.text = element_text(size = 10),
legend.title = element_text(hjust = 0.5, size = 12),
plot.title = element_text(hjust = 0.5, size = 10, face = 'bold'),
panel.spacing = unit(0.4, "lines"),
strip.background =element_rect(fill="white"),
panel.background = element_blank()) +
guides(fill=guide_legend(ncol=2))+
labs(title = 'Land Meeting Benchmarks')
??geom_waffle
w <- ggplot(waff_dat_cover, aes(fill = Statistic, values = Value)) +
waffle::geom_waffle(color = "white", size = .25, flip = TRUE) +
facet_wrap( ~ Subpopulation) +
scale_fill_manual('Condition', values = waf_values,
labels = c('Meeting', 'Conf. Int.', "Estimate", 'Conf. Int.', 'Failing')) +
scale_x_discrete()  +
scale_y_continuous('Percent Land', labels = function(x)round(x * 10, -1), expand = c(0,0))  +
theme(
legend.position="bottom", legend.direction="vertical",
aspect.ratio = 1,
axis.text.y = element_text(color = "grey20", size = 6, angle = 45),
axis.title.y = element_text(size = 9),
legend.key.size = unit(0.8, 'lines'),
legend.text = element_text(size = 10),
legend.title = element_text(hjust = 0.5, size = 12),
plot.title = element_text(hjust = 0.5, size = 10, face = 'bold'),
panel.spacing = unit(0.4, "lines"),
strip.background =element_rect(fill="white"),
panel.background = element_blank()) +
guides(fill=guide_legend(ncol=2))+
labs(title = 'Land Meeting Benchmarks')
ggsave(w, path = '../results', device = 'png', bg = 'transparent',
filename = 'waffles.png', dpi = 300, height = 4, units = "in")
## References
View(waff_dat_cover)
View(waff_dat_cover)
waff_dat_cover <- overall_stab %>%
filter(Category == T) %>%
mutate(
across(where(is.numeric), ~ round(.x, 0)),
Low = if_else(LCB80Pct.P == 0, 0, LCB80Pct.P - 1),
CI_Low = Estimate.P - LCB80Pct.P,
Estimate = 1,
CI_High = UCB80Pct.P - Estimate.P,
High = if_else(UCB80Pct.P == 0, 100, 100 - UCB80Pct.P)
) %>%
rowwise(Subpopulation) #%>%
View(waff_dat_cover)
waff_dat_cover <- overall_stab %>%
filter(Category == T) %>%
mutate(
across(where(is.numeric), ~ round(.x, 0)),
Low = if_else(LCB80Pct.P == 0, 0, LCB80Pct.P - 1),
CI_Low = Estimate.P - LCB80Pct.P,
Estimate = 1,
CI_High = UCB80Pct.P - Estimate.P,
High = if_else(UCB80Pct.P == 0, 100, 100 - UCB80Pct.P)
) %>%
rowwise(Subpopulation) %>%
mutate(High = if_else(sum(c_across(Low:High)) > 100, High -1, High),
High = if_else(sum(c_across(Low:High)) < 100, High + 1, High),
Subpopulation = str_replace(Subpopulation, 'SampleFrame', 'Remaining-BLM'))  %>%
select(Subpopulation, Low:High) %>%
pivot_longer(cols = Low:High, names_to = 'Statistic', values_to = 'Value') %>%
group_by(Subpopulation) %>%
mutate(
Statistic = factor(Statistic,
levels = c('Low', 'CI_Low', 'Estimate', 'CI_High', 'High')),
Subpopulation = factor(Subpopulation,
levels = c('ACEC-WSA', 'DE-NCA', 'GG-NCA', 'Remaining-BLM')))
waff_dat <- data.table::setorder(waff_dat_cover, Statistic)
waf_values = c('Low' = '#1FE032', 'High' = '#E0321F', 'CI_Low' = '#808929',
'Estimate' = 'black', 'CI_High' = '#808929')
w <- ggplot(waff_dat_cover, aes(fill = Statistic, values = Value)) +
waffle::geom_waffle(color = "white", size = .25, flip = TRUE) +
facet_wrap( ~ Subpopulation) +
scale_fill_manual('Condition', values = waf_values,
labels = c('Meeting', 'Conf. Int.', "Estimate", 'Conf. Int.', 'Failing')) +
scale_x_discrete()  +
scale_y_continuous('Percent Land', labels = function(x)round(x * 10, -1), expand = c(0,0))  +
theme(
legend.position="bottom", legend.direction="vertical",
aspect.ratio = 1,
axis.text.y = element_text(color = "grey20", size = 6, angle = 45),
axis.title.y = element_text(size = 9),
legend.key.size = unit(0.8, 'lines'),
legend.text = element_text(size = 10),
legend.title = element_text(hjust = 0.5, size = 12),
plot.title = element_text(hjust = 0.5, size = 10, face = 'bold'),
panel.spacing = unit(0.4, "lines"),
strip.background =element_rect(fill="white"),
panel.background = element_blank()) +
guides(fill=guide_legend(ncol=2))+
labs(title = 'Land Meeting Benchmarks')
ggsave(w, path = '../results', device = 'png', bg = 'transparent',
filename = 'waffles.png', dpi = 300, height = 4, units = "in")
